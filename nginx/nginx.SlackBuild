#!/bin/bash -ex

# Slackware build script for nginx

# Copyright 2008 Cherife Li <cherife-#-dotimes.com>
# Copyright 2011 Diogo Leal <diogo@diogoleal.com>
# Copyright 2012-13 Francisco Ambrozio <sbo@franciscoambrozio.com>
# Copyright 2014-2017 Larry Hajali <larryhaja[at]gmail[dot]com>
# Copyright 2023 Sergei Fedosoff <eleksir@gmail.com>
#
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Special thanks to Thomas Morper for some configuration adjustments tips

PRGNAM=nginx
VERSION=${VERSION:-1.24.0}
BUILD=${BUILD:-2}
TAG=${TAG:-_EXs}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/EXs}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
   SLKCFLAGS="-O2 -march=i586 -mtune=i686"
   LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
   SLKCFLAGS="-O2 -march=i686 -mtune=i686"
   LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
   SLKCFLAGS="-g -O2 -fPIC"
   LIBDIRSUFFIX="64"
else
   SLKCFLAGS=""
   LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# Remove -Werror from CFLAGS.
# https://trac.nginx.org/nginx/ticket/1259
sed -i '/-Werror/d' auto/cc/gcc

# Fix the nginx.conf file for html and virtual server directory.
sed -i \
  -e '/root[ ]*html/s|html;|/var/www/&|' \
  -e '$s|.*|    include /etc/nginx/conf.d/\*.conf;\n&|' conf/$PRGNAM.conf

# Add if dynamic modules are used.
if [ "${DYNAMIC:-no}" == "yes" ]; then
  DYNAMIC_MODULE=${DYNAMIC_MODULE:-=dynamic}
  sed -i 's|^events.*|include /etc/nginx/modules/\*.conf;\n\n&|' conf/$PRGNAM.conf
else
  DYNAMIC_MODULE=""
fi

# Enable GeoIP support.
if [ "${GEOIP:-yes}" == "yes" ]; then
  GEOIP_MOD="--with-http_geoip_module${DYNAMIC_MODULE}
             --with-stream_geoip_module${DYNAMIC_MODULE}"
else
  GEOIP_MOD=""
fi

# Add extra modules not included in nginx.
ADDMODULE=${ADDMODULE:-}
if [ "$DYNAMIC" == "yes" ]; then
  ADD_MODULE="--add-dynamic-module=$ADDMODULE
              --modules-path=/usr/lib${LIBDIRSUFFIX}/$PRGNAM/modules"
else
  ADD_MODULE="--add-module=$ADDMODULE"
fi

# Enable gperftools support.
if [ "${GPERF:-no}" == "yes" ]; then
  GPERF_MOD="--with-google_perftools_module"
else
  GPERF_MOD=""
fi


CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
LDFLAGS="-flto -rdynamic -Wl,--export-dynamic -Wl,-O2 -Wl,-E -Wl,--no-as-needed" \
./configure \
  --prefix=/usr \
  --sbin-path=/usr/sbin/nginx \
  --conf-path=/etc/nginx/nginx.conf \
  --pid-path=/run/nginx.pid \
  --lock-path=/var/lock/subsys \
  --user=apache \
  --group=apache \
  --error-log-path=/var/log/nginx/error.log \
  --http-log-path=/var/log/nginx/access.log \
  --http-client-body-temp-path=/var/lib/nginx/client_body \
  --http-proxy-temp-path=/var/lib/nginx/proxy \
  --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
  --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
  --http-scgi-temp-path=/var/lib/nginx/scgi \
  --with-file-aio \
  --with-select_module \
  --with-poll_module \
  --with-http_ssl_module \
  --with-http_v2_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_xslt_module${DYNAMIC_MODULE} \
  --with-http_image_filter_module${DYNAMIC_MODULE} \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_mp4_module \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_auth_request_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_degradation_module \
  --with-http_slice_module \
  --with-http_stub_status_module \
  --with-http_perl_module${DYNAMIC_MODULE} \
  --with-mail${DYNAMIC_MODULE} \
  --with-mail_ssl_module \
  --with-stream${DYNAMIC_MODULE} \
  --with-stream_ssl_module \
  --with-stream_realip_module \
  --with-stream_ssl_preread_module \
  --with-cpp_test_module \
  --with-compat \
  --with-debug \
  --with-pcre \
  --with-pcre-jit \
  --with-libatomic \
  $GEOIP_MOD \
  $GPERF_MOD \
  $ADD_MODULE

make -j$(nproc)
make -j$(nproc) install \
  DESTDIR=$PKG \
  INSTALLDIRS=vendor \
  INSTALLVENDORMAN3DIR=/usr/man/man3

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

install -Dpm 0644 objs/$PRGNAM.8 $PKG/usr/man/man8
find $PKG/usr/man -type f -exec gzip -9 {} \+

find $PKG -name perllocal.pod \
  -o -name ".packlist" \
  -o -name "*.bs" \
  | xargs rm -f {}

find $PKG -perm 444 -exec chmod 0644 {} \+
find $PKG -perm 555 -exec chmod 0755 {} \+

# Make the temp path.
install -dm 0755 -o apache -g apache $PKG/var/lib/$PRGNAM

# Move html directory
mkdir -p $PKG/var/www
mv $PKG/usr/html $PKG/var/www

# Add an init script
install -Dpm 0644 $CWD/rc.nginx $PKG/etc/rc.d/rc.nginx.new

install -Dpm 0644 $CWD/nginx.logrotate $PKG/etc/logrotate.d/nginx.new

# Set the permissions for the log directory.
install -dm 0755 -o apache $PKG/var/log/$PRGNAM

# Create sub-directory for virtual servers.
install -dm 0755 $PKG/etc/$PRGNAM/conf.d

install -Dpm 0644 $CWD/nginx.SlackBuild $PKG/usr/doc/nginx-$VERSION/nginx.SlackBuild
cp -a CHANGES* LICENSE README $PKG/usr/doc/nginx-$VERSION

install -Dpm 0644 $CWD/slack-desc      $PKG/install/slack-desc
install -Dpm 0644 $CWD/slack-required  $PKG/install/slack-required
install -Dpm 0644 $CWD/doinst.sh       $PKG/install/doinst.sh

# Create modules directory and config files.
# Unfortunately, we have to use full paths rather then relative paths
# for nginx dynamic modules, or else we get the following error:
# $ sudo /usr/sbin/nginx -t
# nginx: [emerg] dlopen() "/usr/modules/ngx_stream_module.so" failed (/usr/modules/ngx_stream_module.so: cannot open shared object file: No such file or directory) in /etc/nginx/modules/mod-stream.conf:1
# nginx: configuration file /etc/nginx/nginx.conf test failed
# Source: https://trac.nginx.org/nginx/ticket/961
if [ "$DYNAMIC" == "yes" ]; then
  mkdir $PKG/etc/$PRGNAM/modules
  for module in $PKG/usr/lib${LIBDIRSUFFIX}/$PRGNAM/modules/*; do
    MODULE_NAME=$(basename $module | sed 's|\.so||' | tr _ -)
    MODULE_DIR=$(dirname $module | sed "s|$PKG||")
    echo "load_module \"${MODULE_DIR}/$(basename $module)\";" > \
      $PKG/etc/$PRGNAM/modules/${MODULE_NAME}.conf
    echo "config etc/$PRGNAM/modules/${MODULE_NAME}.conf.new" >> $PKG/install/doinst.sh
  done
fi

# Don't clobber config files
for i in $(find $PKG/etc/$PRGNAM -type f ! -name "*\.default"); do
  mv "$i" "$i".new
done

# Fixup user
sed 's/^.user *nobody/user apache/' $PKG/etc/nginx/nginx.conf.new
sed 's/^.user *nobody/user apache/' $PKG/etc/nginx/nginx.conf.default

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
